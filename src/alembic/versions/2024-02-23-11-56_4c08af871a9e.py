"""empty message

Revision ID: 4c08af871a9e
Revises: eb1a6567456c
Create Date: 2024-02-23 11:56:53.633856

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.sql import func

# import sqlalchemy_utils
# import sqlmodel # added

# revision identifiers, used by Alembic.
revision = "4c08af871a9e"
down_revision = "eb1a6567456c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # User table modifications
    op.alter_column("user", "id", new_column_name="provider_user_id", existing_type=sa.Integer(), nullable=True)
    op.add_column("user", sa.Column("id", sa.Integer(), nullable=False, primary_key=True, autoincrement=True))
    op.alter_column("user", "login", nullable=True)
    op.alter_column("user", "hashed_password", nullable=True)
    op.add_column("user", sa.Column("created_at", sa.DateTime(), server_default=func.now(), nullable=False))

    # Repository table modifications
    op.alter_column("repository", "id", new_column_name="provider_repo_id", existing_type=sa.Integer(), nullable=True)
    op.add_column("repository", sa.Column("id", sa.Integer(), nullable=False, primary_key=True, autoincrement=True))
    op.alter_column("repository", "full_name", new_column_name="name")
    op.alter_column("repository", "installed_at", new_column_name="created_at")
    op.drop_column("repository", "is_active")
    op.drop_column("repository", "installed_by")

    # Guideline table modifications
    op.alter_column("guideline", "details", new_column_name="content")
    op.add_column("guideline", sa.Column("creator_id", sa.Integer(), nullable=True))
    # Enforce the foreign key after initializing it
    op.execute(
        """
        DO $$
        DECLARE
            first_user_id INT;
        BEGIN
            SELECT id INTO first_user_id FROM "user" LIMIT 1;

            IF FOUND THEN
                UPDATE guideline SET creator_id = first_user_id;
                ALTER TABLE guideline ALTER COLUMN creator_id SET NOT NULL;
                ALTER TABLE guideline ADD CONSTRAINT fk_guideline_creator_id FOREIGN KEY (creator_id) REFERENCES "user" (id);
            END IF;
        END $$;
        """
    )
    op.drop_column("guideline", "repo_id")
    op.drop_column("guideline", "title")
    op.drop_column("guideline", "order")
    # ### end Alembic commands ###


def downgrade():
    # Guideline table modifications
    op.alter_column("guideline", "content", new_column_name="details")
    op.add_column("guideline", sa.Column("repo_id", sa.Integer(), nullable=False))
    op.add_column("guideline", sa.Column("title", sa.String(length=100), nullable=False))
    op.add_column("guideline", sa.Column("order", sa.Integer(), nullable=False))
    op.drop_column("guideline", "creator_id")

    # Repository table modifications
    op.drop_column("repository", "id")  # As above for PK handling
    op.alter_column("repository", "provider_repo_id", new_column_name="id", existing_type=sa.Integer(), nullable=False)
    op.alter_column("repository", "name", new_column_name="full_name")
    op.alter_column("repository", "created_at", new_column_name="installed_at")
    op.add_column("repository", sa.Column("is_active", sa.Boolean(), nullable=False))
    op.add_column("repository", sa.Column("installed_by", sa.Integer(), nullable=False))
    # User table modifications
    op.execute('DELETE FROM "user" WHERE provider_user_id IS NULL')
    op.drop_column("user", "created_at")
    op.alter_column("user", "login", nullable=False)
    op.alter_column("user", "hashed_password", nullable=False)
    op.drop_column("user", "id")  # This will remove the new PK; you might need to handle PK sequence reset manually
    op.alter_column("user", "provider_user_id", new_column_name="id", existing_type=sa.Integer(), nullable=False)
    # ### end Alembic commands ###
